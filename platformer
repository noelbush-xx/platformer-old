#!/bin/bash
ERL="/usr/bin/erl"
BASE_DIR=$(cd `dirname $0` && pwd)
CODE_PATH="$BASE_DIR/ebin $BASE_DIR/include $BASE_DIR/deps/*/ebin"
PRIV_DIR="$BASE_DIR/priv"

USAGE="usage: $0 [options] {start|stop|restart|status}"

. /lib/lsb/init-functions || (echo "Missing LSB init-functions; this script won't work right." && exit 1)

# Defaults
PORT=8000
CONFIG="platformer_node"
LOG_CONFIG="log-errors"

# Get options and command
set -- `getopt --options p:rBc:L:qh --longoptions port:,reset-db,background,config:,log-config:,quiet,help --unquoted -- "$@"`
while [ $# -gt 0 ]; do
    case "$1" in
        -B|--background)  BACKGROUND=true; DETACHED="-detached";;
        -c|--config)      CONFIG=$2; shift;;
        -L|--log-config)  LOG_CONFIG=$2; shift;;
        -p|--port)        PORT=$2; PORTSPEC="-platformer port $PORT"; shift;;
        -r|--reset-db)    RESET_DB=" reset-db";;
        -q|--quiet)       QUIET="quiet";;
        -h|--help)
                          echo $USAGE;
                          echo "options (specify any or none):"
                          echo "-p|--port=PORT         configure the Platformer node to listen on port PORT (default: $PORT)"
                          echo "-r|--reset-db          reset the database on startup"
                          echo "-B|--background        run in the background (no shell)"
                          echo "-c|--config=NAME       read application configuration from ./priv/NAME.config (default: $CONFIG)"
                          echo "-L|--log-config=NAME   read logging configuration from ./priv/NAME.config (default: $LOG_CONFIG)"
                          echo "-q|--quiet             don't print any messages about starting and stopping"
                          echo "-h|--help              print this help message"
                          echo
                          echo "command (specify one):"
                          echo "start                  start the specified Platformer node"
                          echo "stop                   stop the specified Platformer node"
                          echo "restart                restart the specified Platformer node"
                          echo "status                 check whether the specified Platformer node is running"
                          echo "connect                connect to the specified Platformer node"
                          echo "killall                attempt to forcefully kill all Platformer nodes that are running"
                          shift
                          exit 0;;
        --)               shift; break;;
        *)                echo >&2 $USAGE; exit 1;;
    esac
    shift
done

# Name the node
if [ -n "$PORTSPEC" ]; then
    NODENAME="platformer_$PORT"
else
    NODENAME="platformer"
fi
FULL_NODENAME=$NODENAME@$HOSTNAME

# Construct any plain arguments to erl
PLAIN_ARGS="$RESET_DB"
if [ -n "$PLAIN_ARGS" ]; then
    PLAIN_ARGS="-- $PLAIN_ARGS"
fi

# Path to pid file
PIDFILE=$PRIV_DIR/pid/$NODENAME.pid

# Arguments to erl
ARGUMENTS="-pa $CODE_PATH -boot start_sasl -s reloader -s platformer -sname $NODENAME -mnesia dir '$PRIV_DIR/db/Mnesia.$NODENAME' -config $PRIV_DIR/$CONFIG -config $PRIV_DIR/$LOG_CONFIG $PORTSPEC $DETACHED $PLAIN_ARGS"

# Start and stop commands using start-stop-daemon
DAEMON_START_CMD="start-stop-daemon --chdir $BASE_DIR --start --quiet --oknodo --exec $ERL --pidfile $PIDFILE -- $ARGUMENTS"
DAEMON_STOP_SCRIPT="rpc:call($FULL_NODENAME, platformer, stop, []), rpc:cast($FULL_NODENAME, erlang, halt, [])."
DAEMON_STOP_CMD="$ERL -sname local -hidden"

# Process command
case "$@" in
    start)
        if [ -n "$BACKGROUND" ] && [ -z "$QUIET" ]; then
            log_begin_msg "Starting Platformer node $FULL_NODENAME"
        fi
        $DAEMON_START_CMD
        if [ -n "$BACKGROUND" ] && [ -z "$QUIET" ]; then
            log_end_msg $?
        fi
        ;;
    stop)
        if [ -z "$QUIET" ]; then
            log_begin_msg "Stopping Platformer node $FULL_NODENAME"
        fi
        echo "$DAEMON_STOP_SCRIPT" | $DAEMON_STOP_CMD 2>&1 > /dev/null && \
        rm -f $PIDFILE
        if [ -z "$QUIET" ]; then
            log_end_msg $?
        fi
        ;;
    restart)
        if [ -z "$QUIET" ]; then
            log_begin_msg "Restarting Platformer node $FULL_NODENAME"
        fi
	   if $DAEMON_STOP_CMD; then
	       $DAEMON_START_CMD
	   fi
        if [ -z "$QUIET" ]; then
	       log_end_msg $?
        fi
	   ;;
    status)
        echo -n "Status of Platformer node: "
	   if [ ! -r "$PIDFILE" ]; then
	      echo "$FULL_NODENAME is not running."
	      exit 3
	   fi
	   read pid < "$PIDFILE"
        if ps -p "$pid" > /dev/null 2>&1; then
	      echo "$FULL_NODENAME is running."
	      exit 0
	   else
	      echo "$FULL_NODENAME is not running but pidfile $PIDFILE exists."
	      exit 1
	   fi
	   ;;
    connect)
        $ERL -sname local -remsh $FULL_NODENAME
        ;;       
    killall)
        if [ -z "$QUIET" ]; then
            echo "Attempting to kill all Platformer nodes."
        fi
        for pidfile in `find $PRIV_DIR/pid -type f`; do
            pid=`cat $pidfile`
            if [ -n "$pid" ]; then
                if [ -z "$QUIET" ]; then
                    echo -n "  ...pid $pid...."
                    kill $pid
                else
                    kill $pid 2>&1 /dev/null
                fi
                kill $pid
                if [ -z "$QUIET" ]; then
                    if [ $? -eq 0 ]; then
                        echo "success."
                    else
                        echo "failed."
                    fi
                fi
            fi
            rm $pidfile
        done
        ;;
    *)
        echo >&2 $USAGE; exit 1;;
esac
